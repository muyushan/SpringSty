<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sane.pkg.dao.mappers.StorageProductMapper" >
  <resultMap id="BaseResultMap" type="com.sane.pkg.beans.StorageProduct" >
    <id column="StorageProductId" property="storageProductId" jdbcType="INTEGER" />
    <result column="ProductCode" property="productCode" jdbcType="VARCHAR" />
    <result column="PlaceholderQuantity" property="placeholderQuantity" jdbcType="DOUBLE" />
    <result column="Quantity" property="quantity" jdbcType="DOUBLE" />
    <result column="Type" property="type" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    StorageProductId, ProductCode, PlaceholderQuantity, Quantity, Type
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.sane.pkg.beans.StorageProductCriteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from StorageProduct
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from StorageProduct
    where StorageProductId = #{storageProductId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from StorageProduct
    where StorageProductId = #{storageProductId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.sane.pkg.beans.StorageProductCriteria" >
    delete from StorageProduct
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.sane.pkg.beans.StorageProduct" >
    <selectKey resultType="java.lang.Integer" keyProperty="storageProductId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into StorageProduct (ProductCode, PlaceholderQuantity, 
      Quantity, Type)
    values (#{productCode,jdbcType=VARCHAR}, #{placeholderQuantity,jdbcType=DOUBLE}, 
      #{quantity,jdbcType=DOUBLE}, #{type,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.sane.pkg.beans.StorageProduct" >
    <selectKey resultType="java.lang.Integer" keyProperty="storageProductId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into StorageProduct
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="productCode != null" >
        ProductCode,
      </if>
      <if test="placeholderQuantity != null" >
        PlaceholderQuantity,
      </if>
      <if test="quantity != null" >
        Quantity,
      </if>
      <if test="type != null" >
        Type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="productCode != null" >
        #{productCode,jdbcType=VARCHAR},
      </if>
      <if test="placeholderQuantity != null" >
        #{placeholderQuantity,jdbcType=DOUBLE},
      </if>
      <if test="quantity != null" >
        #{quantity,jdbcType=DOUBLE},
      </if>
      <if test="type != null" >
        #{type,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.sane.pkg.beans.StorageProductCriteria" resultType="java.lang.Integer" >
    select count(*) from StorageProduct
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update StorageProduct
    <set >
      <if test="record.storageProductId != null" >
        StorageProductId = #{record.storageProductId,jdbcType=INTEGER},
      </if>
      <if test="record.productCode != null" >
        ProductCode = #{record.productCode,jdbcType=VARCHAR},
      </if>
      <if test="record.placeholderQuantity != null" >
        PlaceholderQuantity = #{record.placeholderQuantity,jdbcType=DOUBLE},
      </if>
      <if test="record.quantity != null" >
        Quantity = #{record.quantity,jdbcType=DOUBLE},
      </if>
      <if test="record.type != null" >
        Type = #{record.type,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update StorageProduct
    set StorageProductId = #{record.storageProductId,jdbcType=INTEGER},
      ProductCode = #{record.productCode,jdbcType=VARCHAR},
      PlaceholderQuantity = #{record.placeholderQuantity,jdbcType=DOUBLE},
      Quantity = #{record.quantity,jdbcType=DOUBLE},
      Type = #{record.type,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sane.pkg.beans.StorageProduct" >
    update StorageProduct
    <set >
      <if test="productCode != null" >
        ProductCode = #{productCode,jdbcType=VARCHAR},
      </if>
      <if test="placeholderQuantity != null" >
        PlaceholderQuantity = #{placeholderQuantity,jdbcType=DOUBLE},
      </if>
      <if test="quantity != null" >
        Quantity = #{quantity,jdbcType=DOUBLE},
      </if>
      <if test="type != null" >
        Type = #{type,jdbcType=VARCHAR},
      </if>
    </set>
    where StorageProductId = #{storageProductId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sane.pkg.beans.StorageProduct" >
    update StorageProduct
    set ProductCode = #{productCode,jdbcType=VARCHAR},
      PlaceholderQuantity = #{placeholderQuantity,jdbcType=DOUBLE},
      Quantity = #{quantity,jdbcType=DOUBLE},
      Type = #{type,jdbcType=VARCHAR}
    where StorageProductId = #{storageProductId,jdbcType=INTEGER}
  </update>
</mapper>