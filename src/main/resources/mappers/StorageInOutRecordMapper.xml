<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sane.pkg.dao.mappers.StorageInOutRecordMapper">
  <resultMap id="BaseResultMap" type="com.sane.pkg.beans.StorageInOutRecord">
    <id column="InOutID" jdbcType="INTEGER" property="inOutID" />
    <result column="InOutCode" jdbcType="VARCHAR" property="inOutCode" />
    <result column="ProductCode" jdbcType="VARCHAR" property="productCode" />
    <result column="Quantity" jdbcType="INTEGER" property="quantity" />
    <result column="FormerQuantity" jdbcType="INTEGER" property="formerQuantity" />
    <result column="StorageType" jdbcType="VARCHAR" property="storageType" />
    <result column="InOutType" jdbcType="VARCHAR" property="inOutType" />
    <result column="CreateDate" jdbcType="TIMESTAMP" property="createDate" />
    <result column="Creator" jdbcType="VARCHAR" property="creator" />
    <result column="Remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    InOutID, InOutCode, ProductCode, Quantity, FormerQuantity, StorageType, InOutType, 
    CreateDate, Creator, Remark
  </sql>
  <select id="selectByExample" parameterType="com.sane.pkg.beans.StorageInOutRecordCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from StorageInOutRecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart&gt;=0">
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from StorageInOutRecord
    where InOutID = #{inOutID,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from StorageInOutRecord
    where InOutID = #{inOutID,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.sane.pkg.beans.StorageInOutRecordCriteria">
    delete from StorageInOutRecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.sane.pkg.beans.StorageInOutRecord">
    <selectKey keyProperty="inOutID" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into StorageInOutRecord (InOutCode, ProductCode, Quantity, 
      FormerQuantity, StorageType, InOutType, 
      CreateDate, Creator, Remark
      )
    values (#{inOutCode,jdbcType=VARCHAR}, #{productCode,jdbcType=VARCHAR}, #{quantity,jdbcType=INTEGER}, 
      #{formerQuantity,jdbcType=INTEGER}, #{storageType,jdbcType=VARCHAR}, #{inOutType,jdbcType=VARCHAR}, 
      #{createDate,jdbcType=TIMESTAMP}, #{creator,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.sane.pkg.beans.StorageInOutRecord">
    <selectKey keyProperty="inOutID" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into StorageInOutRecord
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="inOutCode != null">
        InOutCode,
      </if>
      <if test="productCode != null">
        ProductCode,
      </if>
      <if test="quantity != null">
        Quantity,
      </if>
      <if test="formerQuantity != null">
        FormerQuantity,
      </if>
      <if test="storageType != null">
        StorageType,
      </if>
      <if test="inOutType != null">
        InOutType,
      </if>
      <if test="createDate != null">
        CreateDate,
      </if>
      <if test="creator != null">
        Creator,
      </if>
      <if test="remark != null">
        Remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="inOutCode != null">
        #{inOutCode,jdbcType=VARCHAR},
      </if>
      <if test="productCode != null">
        #{productCode,jdbcType=VARCHAR},
      </if>
      <if test="quantity != null">
        #{quantity,jdbcType=INTEGER},
      </if>
      <if test="formerQuantity != null">
        #{formerQuantity,jdbcType=INTEGER},
      </if>
      <if test="storageType != null">
        #{storageType,jdbcType=VARCHAR},
      </if>
      <if test="inOutType != null">
        #{inOutType,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null">
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.sane.pkg.beans.StorageInOutRecordCriteria" resultType="java.lang.Integer">
    select count(*) from StorageInOutRecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update StorageInOutRecord
    <set>
      <if test="record.inOutID != null">
        InOutID = #{record.inOutID,jdbcType=INTEGER},
      </if>
      <if test="record.inOutCode != null">
        InOutCode = #{record.inOutCode,jdbcType=VARCHAR},
      </if>
      <if test="record.productCode != null">
        ProductCode = #{record.productCode,jdbcType=VARCHAR},
      </if>
      <if test="record.quantity != null">
        Quantity = #{record.quantity,jdbcType=INTEGER},
      </if>
      <if test="record.formerQuantity != null">
        FormerQuantity = #{record.formerQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.storageType != null">
        StorageType = #{record.storageType,jdbcType=VARCHAR},
      </if>
      <if test="record.inOutType != null">
        InOutType = #{record.inOutType,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null">
        CreateDate = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.creator != null">
        Creator = #{record.creator,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null">
        Remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update StorageInOutRecord
    set InOutID = #{record.inOutID,jdbcType=INTEGER},
      InOutCode = #{record.inOutCode,jdbcType=VARCHAR},
      ProductCode = #{record.productCode,jdbcType=VARCHAR},
      Quantity = #{record.quantity,jdbcType=INTEGER},
      FormerQuantity = #{record.formerQuantity,jdbcType=INTEGER},
      StorageType = #{record.storageType,jdbcType=VARCHAR},
      InOutType = #{record.inOutType,jdbcType=VARCHAR},
      CreateDate = #{record.createDate,jdbcType=TIMESTAMP},
      Creator = #{record.creator,jdbcType=VARCHAR},
      Remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sane.pkg.beans.StorageInOutRecord">
    update StorageInOutRecord
    <set>
      <if test="inOutCode != null">
        InOutCode = #{inOutCode,jdbcType=VARCHAR},
      </if>
      <if test="productCode != null">
        ProductCode = #{productCode,jdbcType=VARCHAR},
      </if>
      <if test="quantity != null">
        Quantity = #{quantity,jdbcType=INTEGER},
      </if>
      <if test="formerQuantity != null">
        FormerQuantity = #{formerQuantity,jdbcType=INTEGER},
      </if>
      <if test="storageType != null">
        StorageType = #{storageType,jdbcType=VARCHAR},
      </if>
      <if test="inOutType != null">
        InOutType = #{inOutType,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        CreateDate = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null">
        Creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        Remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where InOutID = #{inOutID,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sane.pkg.beans.StorageInOutRecord">
    update StorageInOutRecord
    set InOutCode = #{inOutCode,jdbcType=VARCHAR},
      ProductCode = #{productCode,jdbcType=VARCHAR},
      Quantity = #{quantity,jdbcType=INTEGER},
      FormerQuantity = #{formerQuantity,jdbcType=INTEGER},
      StorageType = #{storageType,jdbcType=VARCHAR},
      InOutType = #{inOutType,jdbcType=VARCHAR},
      CreateDate = #{createDate,jdbcType=TIMESTAMP},
      Creator = #{creator,jdbcType=VARCHAR},
      Remark = #{remark,jdbcType=VARCHAR}
    where InOutID = #{inOutID,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.sane.pkg.beans.StorageInOutRecord">
    <id column="InOutID" jdbcType="INTEGER" property="inOutID" />
    <result column="InOutCode" jdbcType="VARCHAR" property="inOutCode" />
    <result column="ProductCode" jdbcType="VARCHAR" property="productCode" />
    <result column="Quantity" jdbcType="INTEGER" property="quantity" />
    <result column="FormerQuantity" jdbcType="INTEGER" property="formerQuantity" />
    <result column="InOutType" jdbcType="VARCHAR" property="inOutType" />
    <result column="CreateDate" jdbcType="TIMESTAMP" property="createDate" />
    <result column="Creator" jdbcType="VARCHAR" property="creator" />
    <result column="Remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    InOutID, InOutCode, ProductCode, Quantity, FormerQuantity, InOutType, CreateDate, 
    Creator, Remark
  </sql>
  <select id="selectByExample" parameterType="com.sane.pkg.beans.StorageInOutRecordCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from StorageInOutRecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart&gt;=0">
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from StorageInOutRecord
    where InOutID = #{inOutID,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from StorageInOutRecord
    where InOutID = #{inOutID,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.sane.pkg.beans.StorageInOutRecordCriteria">
    delete from StorageInOutRecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.sane.pkg.beans.StorageInOutRecord">
    <selectKey keyProperty="inOutID" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into StorageInOutRecord (InOutCode, ProductCode, Quantity, 
      FormerQuantity, InOutType, CreateDate, 
      Creator, Remark)
    values (#{inOutCode,jdbcType=VARCHAR}, #{productCode,jdbcType=VARCHAR}, #{quantity,jdbcType=INTEGER}, 
      #{formerQuantity,jdbcType=INTEGER}, #{inOutType,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, 
      #{creator,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.sane.pkg.beans.StorageInOutRecord">
    <selectKey keyProperty="inOutID" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into StorageInOutRecord
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="inOutCode != null">
        InOutCode,
      </if>
      <if test="productCode != null">
        ProductCode,
      </if>
      <if test="quantity != null">
        Quantity,
      </if>
      <if test="formerQuantity != null">
        FormerQuantity,
      </if>
      <if test="inOutType != null">
        InOutType,
      </if>
      <if test="createDate != null">
        CreateDate,
      </if>
      <if test="creator != null">
        Creator,
      </if>
      <if test="remark != null">
        Remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="inOutCode != null">
        #{inOutCode,jdbcType=VARCHAR},
      </if>
      <if test="productCode != null">
        #{productCode,jdbcType=VARCHAR},
      </if>
      <if test="quantity != null">
        #{quantity,jdbcType=INTEGER},
      </if>
      <if test="formerQuantity != null">
        #{formerQuantity,jdbcType=INTEGER},
      </if>
      <if test="inOutType != null">
        #{inOutType,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null">
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.sane.pkg.beans.StorageInOutRecordCriteria" resultType="java.lang.Integer">
    select count(*) from StorageInOutRecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update StorageInOutRecord
    <set>
      <if test="record.inOutID != null">
        InOutID = #{record.inOutID,jdbcType=INTEGER},
      </if>
      <if test="record.inOutCode != null">
        InOutCode = #{record.inOutCode,jdbcType=VARCHAR},
      </if>
      <if test="record.productCode != null">
        ProductCode = #{record.productCode,jdbcType=VARCHAR},
      </if>
      <if test="record.quantity != null">
        Quantity = #{record.quantity,jdbcType=INTEGER},
      </if>
      <if test="record.formerQuantity != null">
        FormerQuantity = #{record.formerQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.inOutType != null">
        InOutType = #{record.inOutType,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null">
        CreateDate = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.creator != null">
        Creator = #{record.creator,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null">
        Remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update StorageInOutRecord
    set InOutID = #{record.inOutID,jdbcType=INTEGER},
      InOutCode = #{record.inOutCode,jdbcType=VARCHAR},
      ProductCode = #{record.productCode,jdbcType=VARCHAR},
      Quantity = #{record.quantity,jdbcType=INTEGER},
      FormerQuantity = #{record.formerQuantity,jdbcType=INTEGER},
      InOutType = #{record.inOutType,jdbcType=VARCHAR},
      CreateDate = #{record.createDate,jdbcType=TIMESTAMP},
      Creator = #{record.creator,jdbcType=VARCHAR},
      Remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sane.pkg.beans.StorageInOutRecord">
    update StorageInOutRecord
    <set>
      <if test="inOutCode != null">
        InOutCode = #{inOutCode,jdbcType=VARCHAR},
      </if>
      <if test="productCode != null">
        ProductCode = #{productCode,jdbcType=VARCHAR},
      </if>
      <if test="quantity != null">
        Quantity = #{quantity,jdbcType=INTEGER},
      </if>
      <if test="formerQuantity != null">
        FormerQuantity = #{formerQuantity,jdbcType=INTEGER},
      </if>
      <if test="inOutType != null">
        InOutType = #{inOutType,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        CreateDate = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null">
        Creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        Remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where InOutID = #{inOutID,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sane.pkg.beans.StorageInOutRecord">
    update StorageInOutRecord
    set InOutCode = #{inOutCode,jdbcType=VARCHAR},
      ProductCode = #{productCode,jdbcType=VARCHAR},
      Quantity = #{quantity,jdbcType=INTEGER},
      FormerQuantity = #{formerQuantity,jdbcType=INTEGER},
      InOutType = #{inOutType,jdbcType=VARCHAR},
      CreateDate = #{createDate,jdbcType=TIMESTAMP},
      Creator = #{creator,jdbcType=VARCHAR},
      Remark = #{remark,jdbcType=VARCHAR}
    where InOutID = #{inOutID,jdbcType=INTEGER}
  </update>
</mapper>